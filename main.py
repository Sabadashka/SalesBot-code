import os
import random

import telebot
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types
import settings
from AdminAndModeratorButtonsFunc.ModeratorAdvertisementNewDescription import moderator_set_new_description_ad
from AdminAndModeratorButtonsFunc.ModeratorAdvertisementNewName import moderator_set_new_name_ad
from AdminAndModeratorButtonsFunc.ModeratorConfirmAdPublication import publish_ad, delete_ad
from AdminAndModeratorButtonsFunc.ModeratorAdvertisementNewCategory import moderator_process_new_category_ad_input
from AdvertisementButtonsFunc.ActivateMyAd import activate_my_ad
from AdvertisementButtonsFunc.AddToFavorites import add_to_favorites
from AdminAndModeratorButtonsFunc.AdminResponseToViolation import yes_violation, no_violation
from AdvertisementButtonsFunc.AdvertisementExtend import extend_my_ad
from AdvertisementButtonsFunc.AdvertisementNewDescription import set_new_description_ad_btn
from AdvertisementButtonsFunc.AdvertisementNewLocation import process_new_location_ad_input
from AdvertisementButtonsFunc.AdvertisementNewName import set_new_name_ad_btn
from AdvertisementButtonsFunc.AdvertisementNewPhotos import set_new_photos_ad_btn
from AdvertisementButtonsFunc.AdvertisementNewPrice import set_new_price_ad_btn
from AdvertisementButtonsFunc.AdvertisementShowAllPhotos import show_all_photos_by_advertisement_id
from AdvertisementButtonsFunc.Complaint import complaint
from AdvertisementButtonsFunc.DeactivateMyAd import deactivate_my_ad
from AdvertisementButtonsFunc.DeleteFromFavorites import delete_favorite
from AdvertisementButtonsFunc.DeleteMyAd import delete_my_ad
from AdvertisementButtonsFunc.OwnerInfo import show_owner_info
from DataBase.Advertisement_database import check_and_deactivate_ads, print_ads_for_deactivation
from DataBase.BlockedUsers_database import get_all_data_blocked_user, \
    check_and_unblock_users
from DataBase.Notified_database import check_notified, create_new_notified
from DataBase.Users_database import get_user_data
from FunctionsMenuBtn.FunctionsAdminMenuBtn.AdminCheckQuestions import start_creating_answer, reject_answer
from FunctionsMenuBtn.UserCreateAdvertisement import start_creating_advertisement, cancel_advertisement_creation
from FunctionsMenuBtn.MainMenu import main_menu
from FunctionsMenuBtn.UserShowNotifications import display_notifications, show_notification
from FunctionsMenuBtn.UserCreateQuestion import start_creating_question
from Messages.HelpMessage import message_help
from OtherTools.CancelAction import cancel_registration_button
from FunctionsMenuBtn.UserShowFavorites import show_user_favorites_with_status_published, print_favorite
from FunctionsMenuBtn.UserShowAdvertisements import request_ad_type, \
    show_user_advertisements_with_status_on_moderation, show_user_advertisements_with_status_published, \
    show_user_advertisements_with_status_deleted, show_user_advertisements_with_status_deactivated, send_advertisement
from FunctionsMenuBtn.UserCreateProfile import start_creating_user
from Markups.categories_markups import category_markup, children_world_markup, vehicle_markup, realty_markup, \
    spare_parts_markup, job_markup, animals_markup, house_garden_markup, electronics_markup, business_services_markup, \
    rent_hire_markup, fashion_style_markup, hobbies_markup
from Markups.menu_markups import keyboard_menu, admin_keyboard_menu, moderator_keyboard_menu
from FunctionsMenuBtn.UserShowProfile import show_user_profile_back
from OtherTools.CheckMessageInterval import check_message_interval, warning_phrases
from OtherTools.CheckRole import check_role_for_moderation, check_exists_moderation, check_role_for_complaints, \
    check_exists_complaints, check_role_for_show_users, check_role_for_show_moderators, check_role_for_show_admins, \
    check_role_for_show_blocked_users, check_role_for_block_user, check_role_for_unblock_user, \
    check_role_for_database_actions, role_check_to_return_to_menu, check_role_to_enter_moderator_panel, \
    check_role_to_enter_admin_panel, check_role_for_change_role_user, \
    check_role_to_return_to_apanel_menu, check_role_for_show_top_moderators, blocked_user_info, \
    check_role_for_make_notification, check_role_for_show_questions, check_role_exit_from_top_moderators, \
    check_role_for_show_top_moderators_by_moderation, check_role_for_show_top_moderators_by_answers, \
    check_role_for_choice_type_show_users, check_exist_answer
from OtherTools.GetUserNameTelegram import get_username_from_acc_id
from Messages.StartBotMessages import send_message_with_username
from OtherTools.LoggingSetup import setup_menu_logger
from SearchAds.ClearFilters import handle_clear_search, handle_clear_matches_text, handle_clear_all_filters_search, \
    handle_clear_condition, handle_clear_category_subcategory, handle_clear_price_max_min, \
    handle_clear_location_region_city, handle_clear_sort_by
from SearchAds.Inputs.InputCategorySubcategory import process_category_step
from SearchAds.Inputs.InputCondition import process_condition_step
from SearchAds.Inputs.InputLocation import process_location_region_step
from SearchAds.Inputs.InputMatchesText import process_matches_text_step
from SearchAds.Inputs.InputPriceMinMax import process_price_step
from SearchAds.Inputs.InputSortBy import process_sort_by
from SearchAds.SearchAds import handle_start_search_advertisements, handle_previous_advertisement, \
    handle_next_advertisement, get_user_search
# from SearchAds.SearchAds import send_next_advertisement
from SearchAds.SearchMessage import search_message, search_filters_message
from UserProfileButtonsFunctions.UserDeleteProfile import delete_account, no_delete_profile, yes_delete_profile
from Markups.user_profile_markups import profile_editing_markups, profile_settings_markups
from UserProfileButtonsFunctions.UserNewMail import process_change_mail
from UserProfileButtonsFunctions.UserNewName import new_name


bot = telebot.TeleBot(settings.botAPI)


@bot.message_handler(commands=["apanel"])
def connect_admin_panel(message):
    acc_id = message.chat.id
    user_data = get_user_data(acc_id)

    if user_data is not None:
        role = user_data.get('role', 2)
        if role == 2:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –£ –í–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*!", parse_mode='Markdown',
                             reply_markup=admin_keyboard_menu)
        elif role == 1:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –£ –í–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*!", parse_mode='Markdown',
                             reply_markup=moderator_keyboard_menu)
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í–∏ –Ω–µ *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä*/*–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä*. –£ –í–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤!",
                             parse_mode='Markdown',
                             reply_markup=keyboard_menu)


@bot.message_handler(commands=["start"])
def start(message):
    # –∑–∞–ø–∏—Ç –Ω–∞ –ë–î
    acc_id = message.chat.id
    user_data = get_user_data(acc_id)

    if user_data is None:
        username = get_username_from_acc_id(bot, acc_id)
        send_message_with_username(bot, message, username)

    else:
        role = user_data.get('role', 2)

        if role == 2:
            role_info = "üëë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ *–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä*"
            bot.send_message(message.chat.id, role_info, reply_markup=admin_keyboard_menu, parse_mode='Markdown')
            bot.send_message(message.chat.id, '‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é', reply_markup=keyboard_menu)

        elif role == 1:
            role_info = "üõ°Ô∏è –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä*"
            bot.send_message(message.chat.id, role_info, reply_markup=admin_keyboard_menu, parse_mode='Markdown')
            bot.send_message(message.chat.id, '‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é', reply_markup=keyboard_menu)

        elif role == 0:
            bot.send_message(message.chat.id, '‚ùóÔ∏è –£ –í–∞—Å –≤–∂–µ —ñ—Å–Ω—É—î –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å')
            bot.send_message(message.chat.id, '‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é', reply_markup=keyboard_menu)

        elif role == -1:
            blocked_user_data = get_all_data_blocked_user(acc_id)
            if blocked_user_data:
                blocked_user_info(bot, message, acc_id)

            else:
                bot.send_message(message.chat.id, f'‚ùóÔ∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó...')
            # bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é', reply_markup=keyboard_menu)

        else:
            bot.send_message(message.chat.id, 'Ô∏è‚ùóÔ∏è –£ –í–∞—Å –Ω–µ–º–∞—î —Ä–æ–ª—ñ, —è–∫—ñ—Å—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ '
                                              '–ø—ñ–¥—Ç—Ä–∏–º–∫—É.')


menu_logger = setup_menu_logger()


# –û–∫—Ä–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.chat.type == 'private':
        # –∑–∞–ø–∏—Ç –Ω–∞ –ë–î
        acc_id = message.chat.id
        user_data = get_user_data(acc_id)
        # check_blocked_role(bot, message, role, acc_id)

        if user_data is not None:
            role = user_data.get('role', 2)

            if role == -1:
                blocked_user_info(bot, message, acc_id)
                return

            if not check_message_interval(acc_id, message.text, interval_seconds=3):
                warning_message = '<b>‚ùóÔ∏è –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∞–∫ —á–∞—Å—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏</b>\n\n'
                # warning_message += random.choice(warning_phrases)
                warning_message += random.sample(warning_phrases, 1)[0]
                bot.send_message(acc_id, warning_message, parse_mode='HTML')
                return

            menu_logger.info(f'ID: {acc_id} >>> {message.text}')

            if message.text == 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                start_creating_advertisement(bot, message)

            elif message.text == 'üîç –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å':
                user_search = get_user_search(acc_id)
                search_message(bot, message, user_search)

            elif message.text == 'üöÄ –í–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫':
                handle_start_search_advertisements(bot, message)

            elif message.text == '‚óÄÔ∏è –í–∏–π—Ç–∏ –∑ –ø–æ—à—É–∫—É':
                handle_clear_search(bot, message, acc_id)

            elif message.text == '‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                handle_previous_advertisement(bot, message)

            elif message.text == '–ù–∞—Å—Ç—É–ø–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ‚ñ∂Ô∏è':
                handle_next_advertisement(bot, message)

            elif message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—à—É–∫':
                handle_clear_search(bot, message, acc_id)

            elif message.text == 'üìÇ –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                # show_user_advertisements(bot, message)
                request_ad_type(bot, message)

            elif message.text == 'üìå –ê–∫—Ç–∏–≤–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                show_user_advertisements_with_status_published(bot, message)
                # request_ad_type(bot, message)

            elif message.text == '‚è≥ –û—á—ñ–∫—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É':
                show_user_advertisements_with_status_on_moderation(bot, message)

            elif message.text == 'üö´ –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                show_user_advertisements_with_status_deactivated(bot, message)

            elif message.text == 'üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                show_user_advertisements_with_status_deleted(bot, message)

            elif message.text == '‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
                main_menu(bot, message)

            elif message.text == 'üë§ –ú—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å':
                # show_user_profile(bot, message)
                profile_text = show_user_profile_back(message)

                # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å —É —á–∞—Ç
                bot.send_message(message.chat.id, profile_text, parse_mode="HTML",
                                 reply_markup=profile_settings_markups)

            elif message.text == '‚ùì –î–æ–ø–æ–º–æ–≥–∞':
                help_markup = types.InlineKeyboardMarkup(row_width=1)
                question_button = types.InlineKeyboardButton("‚ùì –£ –º–µ–Ω–µ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='make_question')
                help_markup.add(question_button)

                bot.send_message(message.chat.id, message_help, parse_mode='HTML', reply_markup=help_markup)

            elif message.text == 'üîîÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è':
                # display_notifications(bot, message, acc_id)
                display_notifications(bot, message)

            elif message.text == '‚ù§Ô∏è –í–∏–±—Ä–∞–Ω—ñ':
                show_user_favorites_with_status_published(bot, message)

            # admin_panel
            elif message.text == 'üëëÔ∏è –ê–¥–º—ñ–Ω—Å—å–∫–∞ –ø–∞–Ω–µ–ª—å':
                check_role_to_enter_admin_panel(role, bot, message)

            elif message.text == 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∞ –ø–∞–Ω–µ–ª—å':
                check_role_to_enter_moderator_panel(role, bot, message)

            elif message.text == "‚óÄÔ∏è –í–∏–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
                role_check_to_return_to_menu(role, bot, message)

            # [MODERATOR] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

            elif message.text == "üëÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è":
                check_role_for_moderation(role, bot, message)

            elif message.text == '‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
                check_role_for_moderation(role, bot, message)

            elif message.text == '‚óÄÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω—å':
                check_exists_moderation(role, acc_id, bot, message)

            # ---------------------------------

            # [ADMIN]

            elif message.text == "‚ö†Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–∫–∞—Ä–≥–∏":
                check_role_for_complaints(role, bot, message)

            elif message.text == '‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–∫–∞—Ä–≥–∞':
                check_role_for_complaints(role, bot, message)

            elif message.text == '‚óÄÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ —Å–∫–∞—Ä–≥':
                check_exists_complaints(role, acc_id, bot, message)

            elif message.text == 'üóÉÔ∏è –î—ñ—ó –∑ –ë–∞–∑–æ—é –î–∞–Ω–∏—Ö':
                check_role_for_database_actions(role, bot, message)

            elif message.text == 'üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç–≤—É–≤–∞—á—ñ–≤':
                check_role_for_choice_type_show_users(role, bot, message)

            elif message.text == 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤':
                check_role_for_show_users(role, bot, message)

            elif message.text == 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤':
                check_role_for_show_moderators(role, bot, message)

            elif message.text == 'üëëÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤':
                check_role_for_show_admins(role, bot, message)

            elif message.text == 'üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö':
                check_role_for_show_blocked_users(role, bot, message)

            elif message.text == '‚ùå –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ':
                check_role_for_database_actions(role, bot, message)

            elif message.text == 'üîí –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞':
                check_role_for_block_user(role, acc_id, bot, message)

            elif message.text == 'üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞':
                check_role_for_unblock_user(role, bot, message)

            elif message.text == 'üì¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è':
                check_role_for_make_notification(role, bot, message)

            elif message.text == 'üé≠ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å':
                check_role_for_change_role_user(role, bot, message)

            elif message.text == '‚óÄÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥':
                check_role_to_return_to_apanel_menu(role, bot, message)

            # ---------------------------------

            elif message.text == "üèÜ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤":
                check_role_for_show_top_moderators(role, bot, message)

            elif message.text == "üèÜ [–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å]":
                check_role_for_show_top_moderators_by_moderation(role, bot, message)

            elif message.text == "üèÜ [–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è]":
                check_role_for_show_top_moderators_by_answers(role, bot, message)

            elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                check_role_exit_from_top_moderators(role, bot, message)

            elif message.text == "üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è":
                check_role_for_show_questions(role, bot, message)

            elif message.text == "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚û°Ô∏è":
                check_role_for_show_questions(role, bot, message)

            elif message.text == "‚óÄÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø–∏—Ç–∞–Ω—å":
                check_exist_answer(role, acc_id, bot, message)

            else:
                bot.send_message(message.chat.id, '‚ùóÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞...', reply_markup=keyboard_menu)

        elif message.text == 'üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è':
            start_creating_user(bot, message)

        elif message.text == 'üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º':
            # start(message)
            start_creating_user(bot, message)

        else:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –ë–æ—Ç–æ–º!')


@bot.callback_query_handler(func=lambda call: call.data.startswith('make_question'))
def user_make_question(call):
    acc_id = call.message.chat.id
    start_creating_question(bot, call, acc_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_button'))
def user_make_question(call):
    question_id = call.data[len('answer_button'):]
    acc_id = call.message.chat.id
    start_creating_answer(bot, call, acc_id, question_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_button'))
def user_make_question(call):
    question_id = call.data[len('reject_button'):]
    acc_id = call.message.chat.id
    reject_answer(bot, call, acc_id, question_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_notification'))
def show_full_notification(call):
    notification_id = call.data[len('show_notification'):]
    show_notification(bot, call, notification_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('go_back_notifications'))
def show_notifications(call):
    notification_id = call.data[len('go_back_notifications'):]
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    display_notifications(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'profile_settings')
def profile_editor(call):
    updated_message_text = f"‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ *–ø—Ä–æ—Ñ—ñ–ª—ñ*:"

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=profile_editing_markups,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'go_from_edit')
def profile(call):
    profile_text = show_user_profile_back(call.message)

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=profile_text,
                          reply_markup=profile_settings_markups,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'new_name')
def set_new_name_profile(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    new_name(bot, call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'new_mail')
def set_new_mail_profile(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    process_change_mail(bot, call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'delete_profile')
def delete_profile(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)
    delete_account(bot, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'yes_btn')
def yes_delete_profile_btn(call):
    acc_id = call.message.chat.id
    message_id = call.message.message_id

    yes_delete_profile(bot, call.message, acc_id, message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'no_btn')
def no_delete_profile_btn(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    no_delete_profile(bot, call.message, chat_id, message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_advertisement'))
def show_advertisement(call):
    ad_id = call.data[len('show_advertisement'):]
    # print(ad_id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)
    send_advertisement(bot, call.message, ad_id)


@bot.callback_query_handler(func=lambda call:call.data.startswith('show_favorite'))
def show_favorite(call):
    ad_id = call.data[len('show_favorite'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)
    print_favorite(bot, call.message, ad_id)



@bot.callback_query_handler(func=lambda call: call.data.startswith('deactivate_ad'))
def handle_deactivate_my_advertisement_callback(call):
    ad_id = call.data[len('deactivate_ad'):]

    deactivate_my_ad(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_all_photos_button'))
def handle_show_all_photos_ad_callback(call):
    ad_id = call.data[len('show_all_photos_button'):]

    show_all_photos_by_advertisement_id(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('activate_ad'))
def handle_activate_my_advertisement_callback(call):
    ad_id = call.data[len('activate_ad'):]

    activate_my_ad(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_ad'))
def handle_delete_my_advertisement_callback(call):
    ad_id = call.data[len('delete_ad'):]

    delete_my_ad(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('extend_ad'))
def handle_extend_my_advertisement_callback(call):
    ad_id = call.data[len('extend_ad'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    extend_my_ad(bot, call.message, chat_id, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_ad'))
def handle_edit_advertisement_callback(call):
    ad_id = call.data[len('edit_ad'):]

    new_photos_btn = types.InlineKeyboardButton("üì∏ –û–Ω–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f'new_photos{ad_id}')
    edit_ad_name_btn = types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f'ad_new_name{ad_id}')
    edit_ad_description_btn = types.InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å", callback_data=f'ad_new_description{ad_id}')
    edit_ad_price_btn = types.InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É ", callback_data=f'ad_new_price{ad_id}')
    edit_ad_location_btn = types.InlineKeyboardButton("üìç –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
                                                      callback_data=f'ad_new_location{ad_id}')
    go_from_edit_btn = types.InlineKeyboardButton("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏", callback_data='go_from_ad_edit')

    advertisement_editing_markups = types.InlineKeyboardMarkup(row_width=1)
    advertisement_editing_markups.add(new_photos_btn, edit_ad_name_btn, edit_ad_description_btn, edit_ad_price_btn,
                                      edit_ad_location_btn, go_from_edit_btn)

    updated_message_text = f"‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ *–æ–≥–æ–ª–æ—à–µ–Ω–Ω—ñ*:"

    bot.send_message(call.message.chat.id, updated_message_text, reply_to_message_id=call.message.message_id,
                     parse_mode='Markdown', reply_markup=advertisement_editing_markups)


# –ù–æ–≤—ñ —Ñ–æ—Ç–æ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('new_photos'))
def handle_edit_advertisement_new_photos_callback(call):
    ad_id = call.data[len('new_photos'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    set_new_photos_ad_btn(bot, call, ad_id)


# –ù–æ–≤–µ —ñ–º'—è –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('ad_new_name'))
def handle_edit_advertisement_new_name_callback(call):
    ad_id = call.data[len('ad_new_name'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    set_new_name_ad_btn(bot, call, ad_id, chat_id)


# –ù–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('ad_new_description'))
def handle_edit_advertisement_new_name_callback(call):
    ad_id = call.data[len('ad_new_description'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    set_new_description_ad_btn(bot, call, ad_id, chat_id)


# –ù–æ–≤–∞ —Ü—ñ–Ω–∞ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('ad_new_price'))
def handle_edit_advertisement_new_name_callback(call):
    ad_id = call.data[len('ad_new_price'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    # set_new_price_ad(bot, call, ad_id)
    set_new_price_ad_btn(bot, call, ad_id, chat_id)


# –ù–æ–≤–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('ad_new_location'))
def handle_edit_advertisement_new_name_callback(call):
    ad_id = call.data[len('ad_new_location'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    process_new_location_ad_input(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('go_from_ad_edit'))
def handle_edit_advertisement_new_name_callback(call):
    ad_id = call.data[len('go_from_ad_edit'):]
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.delete_message(chat_id=chat_id, message_id=message_id)
    bot.send_message(call.message.chat.id, "‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_from_favorites_btn'))
def handle_delete_advertisement_from_favorites_callback(call):
    ad_id = call.data[len('delete_from_favorites_btn'):]

    delete_favorite(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_favorites_btn'))
def handle_add_advertisement_to_favorites_callback(call):
    telegram_id = call.message.chat.id
    ad_id = call.data[len('add_to_favorites_btn'):]

    add_to_favorites(bot, call, telegram_id, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('complain_btn'))
def handle_complaint_ad(call):
    telegram_id = call.message.chat.id
    ad_id = call.data[len('complain_btn'):]

    complaint(bot, call, ad_id, telegram_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('no_violation_btn'))
def handle_no_violation(call):
    complaint_id = call.data[len('no_violation_btn'):]

    no_violation(bot, call, complaint_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('yes_violation_btn'))
def handle_detected_violation(call):
    complaint_id = call.data[len('yes_violation_btn'):]

    yes_violation(bot, call, complaint_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('moderator_name_btn'))
def handle_moderator_name(call):
    ad_id = call.data[len('moderator_name_btn'):]
    # bot.send_message(call.message.chat.id, '–í —Ä–æ–∑—Ä–æ–±—Ü—ñ')

    moderator_set_new_name_ad(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('moderator_category_btn'))
def handle_moderator_description(call):
    ad_id = call.data[len('moderator_category_btn'):]

    moderator_process_new_category_ad_input(bot, call, ad_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('moderator_description_btn'))
def handle_detected_violation(call):
    ad_id = call.data[len('moderator_description_btn'):]

    moderator_set_new_description_ad(bot, call, ad_id)


# –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('moderator_publish_ad_btn'))
def handle_delete_my_advertisement_callback(call):
    ad_id = call.data[len('moderator_publish_ad_btn'):]
    telegram_id = call.message.chat.id

    publish_ad(bot, call, ad_id, telegram_id)


# –í–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('moderator_delete_ad_btn'))
def handle_delete_my_advertisement_callback(call):
    ad_id = call.data[len('moderator_delete_ad_btn'):]
    telegram_id = call.message.chat.id

    delete_ad(bot, call, ad_id, telegram_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_contacts_btn'))
def handle_detected_violation(call):
    ad_id = call.data[len('show_contacts_btn'):]

    show_owner_info(bot, call, ad_id)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_advertisement_creation')
def handle_cancel_advertisement_creation_callback(call):
    cancel_advertisement_creation(call.message, bot)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_registration_button')
def handle_cancel_advertisement_creation_callback(call):
    cancel_registration_button(call.message, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'not_available_category_btn')
def not_available_category(call):
    bot.send_message(call.message.chat.id, '‚ùóÔ∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫....\nüò¢ –î–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')


@bot.callback_query_handler(func=lambda call: call.data == '—Åhildren_world_btn')
def children_world(call):
    category_name = '*"üë∂ –î–∏—Ç—è—á–∏–π —Å–≤—ñ—Ç"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=children_world_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'realty_markup_btn')
def realty(call):
    category_name = '*"üè† –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=realty_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'vehicle_markup_btn')
def vehicle(call):
    category_name = '*"üöó –ê–≤—Ç–æ"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=vehicle_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'spare_parts_markup_btn')
def spare_parts_transport(call):
    category_name = '*"üõ†Ô∏è –ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=spare_parts_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'job_markup_btn')
def job(call):
    category_name = '*"üíº –†–æ–±–æ—Ç–∞"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=job_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'animals_markup_btn')
def animals(call):
    category_name = '*"üêæ –¢–≤–∞—Ä–∏–Ω–∏"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=animals_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'house_garden_markup_btn')
def house_garden(call):
    category_name = '*"üè° –î—ñ–º —ñ —Å–∞–¥"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=house_garden_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'electronics_markup_btn')
def electronics(call):
    category_name = '*"üì± –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=electronics_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'business_services_markup_btn')
def business_services(call):
    category_name = '*"ü§ù –ë—ñ–∑–Ω–µ—Å —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=business_services_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'rent_hire_markup_btn')
def rent_hire(call):
    category_name = '*"üöÄ –û—Ä–µ–Ω–¥–∞ —Ç–∞ –ø—Ä–æ–∫–∞—Ç"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=rent_hire_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'fashion_style_markup_btn')
def fashion_style(call):
    category_name = '*"üëó –ú–æ–¥–∞ —Ç–∞ —Å—Ç–∏–ª—å"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=fashion_style_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'hobbies_markup_btn')
def hobbies_recreation_sports(call):
    category_name = '*"‚öΩ –•–æ–±—ñ, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —ñ —Å–ø–æ—Ä—Ç"*'
    updated_message_text = f"‚ùóÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category_name}.\n ü§îÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=hobbies_markup,
                          parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    user_search = get_user_search(user_id)

    if call.data == 'filters_settings_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        search_filters_message(bot, call.message, user_search)

    elif call.data == 'matches_text_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–±—ñ–≥—ñ–≤:")
        bot.register_next_step_handler(call.message,
                                       lambda message: process_matches_text_step(bot, message, user_search))

    elif call.data == 'condition_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        process_condition_step(bot, call.message, user_search)

    elif call.data == 'category_and_subcategory_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        process_category_step(bot, call.message, user_search)

    elif call.data == 'price_min_max_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        process_price_step(bot, call.message, user_search)

    elif call.data == 'location_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        process_location_region_step(bot, call.message, user_search)

    elif call.data == 'sort_by_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        process_sort_by(bot, call.message, user_search)

    elif call.data == 'back_to_message_filters_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        search_message(bot, call.message, user_search)

    elif call.data == 'cancel_matches_text_btn':
        print('cancel_matches_text_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_matches_text(bot, call.message, user_search)

    elif call.data == 'cancel_condition_btn':
        print('cancel_condition_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_condition(bot, call.message, user_search)

    elif call.data == 'cancel_category_and_subcategory_btn':
        print('cancel_category_and_subcategory_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_category_subcategory(bot, call.message, user_search)

    elif call.data == 'cancel_price_min_max_btn':
        print('cancel_price_min_max_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_price_max_min(bot, call.message, user_search)

    elif call.data == 'cancel_location_btn':
        print('cancel_location_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_location_region_city(bot, call.message, user_search)

    elif call.data == 'cancel_sort_by_btn':
        print('cancel_sort_by_btn - all is ok')
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_sort_by(bot, call.message, user_search)

    elif call.data == 'cancel_all_filters_btn':
        message_id = call.message.message_id
        bot.delete_message(chat_id=user_id, message_id=message_id)
        handle_clear_all_filters_search(bot, call.message, user_search)


@bot.callback_query_handler(func=lambda call: True)
def callback_query_subcategory(call):
    if call.message:
        subcategory_text = None

        if call.data == 'children_world_clothing':
            subcategory_text = "üëï –î–∏—Ç—è—á–∏–π –æ–¥—è–≥"
        elif call.data == 'children_world_footwear':
            subcategory_text = "üëü –î–∏—Ç—è—á–µ –≤–∑—É—Ç—Ç—è"
        elif call.data == 'children_world_prams':
            subcategory_text = "üõçÔ∏è –î–∏—Ç—è—á—ñ –∫–æ–ª—è—Å–∫–∏"
        elif call.data == 'children_world_car_seats':
            subcategory_text = "üë∂ –î–∏—Ç—è—á—ñ –∞–≤—Ç–æ–∫—Ä—ñ—Å–ª–∞"
        elif call.data == 'children_world_furniture':
            subcategory_text = "ü™ë –î–∏—Ç—è—á—ñ –º–µ–±–ª—ñ"
        elif call.data == 'children_world_toys':
            subcategory_text = "üé≤ –Ü–≥—Ä–∞—à–∫–∏"
        elif call.data == 'children_world_transport':
            subcategory_text = "üöó –î–∏—Ç—è—á–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
        elif call.data == 'children_world_feeding':
            subcategory_text = "üçº –ì–æ–¥—É–≤–∞–Ω–Ω—è"
        elif call.data == 'children_world_school_supplies':
            subcategory_text = "üéí –¢–æ–≤–∞—Ä–∏ –¥–ª—è —à–∫–æ–ª—è—Ä—ñ–≤"
        elif call.data == 'children_world_others':
            subcategory_text = "üîó –Ü–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏"

        ##
        elif call.data == 'realty_apartments':
            subcategory_text = "üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∏"
        elif call.data == 'realty_rooms':
            subcategory_text = "üõå –ö—ñ–º–Ω–∞—Ç–∏"
        elif call.data == 'realty_houses':
            subcategory_text = "üè° –ë—É–¥–∏–Ω–∫–∏"
        elif call.data == 'realty_short_term_rental':
            subcategory_text = "üè† –ü–æ–¥–æ–±–æ–≤–∞ –æ—Ä–µ–Ω–¥–∞ –∂–∏—Ç–ª–∞"
        elif call.data == 'realty_land':
            subcategory_text = "üå≥ –ó–µ–º–ª—è"
        elif call.data == 'realty_commercial_property':
            subcategory_text = "üè¢ –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
        elif call.data == 'realty_garages_parking':
            subcategory_text = "üöó –ì–∞—Ä–∞–∂—ñ/–ü–∞—Ä–∫–æ–≤–∫–∏"
        elif call.data == 'realty_foreign_property':
            subcategory_text = "üåç –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –∑–∞ –∫–æ—Ä–¥–æ–Ω–æ–º"

        ##
        elif call.data == 'vehicle_cars':
            subcategory_text = "üöó –õ–µ–≥–∫–æ–≤—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ"
        elif call.data == 'vehicle_trucks':
            subcategory_text = "üöö –í–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ"
        elif call.data == 'vehicle_buses':
            subcategory_text = "üöå –ê–≤—Ç–æ–±—É—Å–∏"
        elif call.data == 'vehicle_motorcycles':
            subcategory_text = "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª–∏"
        elif call.data == 'vehicle_special_equipment':
            subcategory_text = "üöú –°–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞"
        elif call.data == 'vehicle_agricultural_machinery':
            subcategory_text = "üöú –°—ñ–ª—å–≥–æ—Å–ø—Ç–µ—Ö–Ω—ñ–∫–∞"
        elif call.data == 'vehicle_water_transport':
            subcategory_text = "üõ•Ô∏è –í–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
        elif call.data == 'vehicle_cars_from_poland':
            subcategory_text = "üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –∑ –ü–æ–ª—å—â—ñ"
        elif call.data == 'vehicle_trailers_motorhomes':
            subcategory_text = "üöê –ü—Ä–∏—á–µ–ø–∏/–ë—É–¥–∏–Ω–∫–∏ –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö"
        elif call.data == 'vehicle_other_transport':
            subcategory_text = "üöÄ –Ü–Ω—à–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"

        ##
        elif call.data == 'spare_parts_auto_parts':
            subcategory_text = "üöó –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"
        elif call.data == 'spare_parts_auto_accessories':
            subcategory_text = "üõ†Ô∏è –ê–∫—Å–µ—Å—É–∞—Ä–∏ –¥–ª—è –∞–≤—Ç–æ"
        elif call.data == 'spare_parts_car_audio_multimedia':
            subcategory_text = "üîä –ê–≤—Ç–æ–∑–≤—É–∫ —Ç–∞ –º—É–ª—å—Ç–∏–º–µ–¥—ñ–∞"
        elif call.data == 'spare_parts_tires_wheels':
            subcategory_text = "üöó –®–∏–Ω–∏/–î–∏—Å–∫–∏ —ñ –ö–æ–ª–µ—Å–∞"
        elif call.data == 'spare_parts_gps_dashcams':
            subcategory_text = "üåê GPS-–Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∏ / –í—ñ–¥–µ–æ—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∏"
        elif call.data == 'spare_parts_transport_for_parts':
            subcategory_text = "üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ / –ê–≤—Ç–æ—Ä–æ–∑–±—ñ—Ä–∫–∞"
        elif call.data == 'spare_parts_motorcycle_parts':
            subcategory_text = "üèçÔ∏è –ú–æ—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"
        elif call.data == 'spare_parts_motorcycle_gear':
            subcategory_text = "üëï –ú–æ—Ç–æ–µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è"
        elif call.data == 'spare_parts_motorcycle_accessories':
            subcategory_text = "üõµ –ú–æ—Ç–æ–∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'spare_parts_lubricants_auto_chemicals':
            subcategory_text = "üß¥ –ú–∞—Å—Ç–∏–ª–∞ —Ç–∞ –ê–≤—Ç–æ—Ö—ñ–º—ñ—è"
        elif call.data == 'spare_parts_other_vehicle_parts':
            subcategory_text = "üî© –ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —ñ–Ω—à–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏"

        ##
        elif call.data == 'job_retail_trade':
            subcategory_text = "üõí –†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è / –ø—Ä–æ–¥–∞–∂—ñ / –∑–∞–∫—É–ø–∫–∞"
        elif call.data == 'job_logistics_warehouse_delivery':
            subcategory_text = "üöö –õ–æ–≥—ñ—Å—Ç–∏–∫–∞ / –°–∫–ª–∞–¥ / –î–æ—Å—Ç–∞–≤–∫–∞"
        elif call.data == 'job_construction_finish_works':
            subcategory_text = "üèóÔ∏è –ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ / –û–±–ª–∏—Ü—é–≤–∞–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏"
        elif call.data == 'job_call_centers_telecommunications':
            subcategory_text = "üìû –ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∏ / –¢–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó"
        elif call.data == 'job_administrative_staff':
            subcategory_text = "üìã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª"
        elif call.data == 'job_security':
            subcategory_text = "üõ°Ô∏è –û—Ö–æ—Ä–æ–Ω–∞ / –ë–µ–∑–ø–µ–∫–∞"
        elif call.data == 'job_cleaning_domestic_staff':
            subcategory_text = "üßπ –ö–ª—ñ–Ω—ñ–Ω–≥ / –î–æ–º–∞—à–Ω—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª"
        elif call.data == 'job_beauty_fitness_sports':
            subcategory_text = "üíá –ö—Ä–∞—Å–∞ / –§—ñ—Ç–Ω–µ—Å / –°–ø–æ—Ä—Ç"
        elif call.data == 'job_education_translation':
            subcategory_text = "üìö –û—Å–≤—ñ—Ç–∞ / –ü–µ—Ä–µ–∫–ª–∞–¥"
        elif call.data == 'job_culture_art_entertainment':
            subcategory_text = "üé≠ –ö—É–ª—å—Ç—É—Ä–∞ / –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ / –†–æ–∑–≤–∞–≥–∏"
        elif call.data == 'job_medical_pharmaceutical':
            subcategory_text = "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞ / –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞"
        elif call.data == 'job_it_computers':
            subcategory_text = "üíª IT / –ö–æ–º–ø'—é—Ç–µ—Ä–∏"
        elif call.data == 'job_banking_finance_insurance_law':
            subcategory_text = "üè¶ –ë–∞–Ω–∫–∏ / –§—ñ–Ω–∞–Ω—Å–∏ / –°—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è / –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü—ñ—è"
        elif call.data == 'job_real_estate':
            subcategory_text = "üè† –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
        elif call.data == 'job_advertising_design_pr':
            subcategory_text = "üì¢ –†–µ–∫–ª–∞–º–∞ / –î–∏–∑–∞–π–Ω / PR"
        elif call.data == 'job_manufacturing':
            subcategory_text = "üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ"
        elif call.data == 'job_agriculture_forestry':
            subcategory_text = "üöú –°—ñ–ª—å—Å—å–∫–µ —ñ –ª—ñ—Å–æ–≤–µ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–æ"
        elif call.data == 'job_part_time':
            subcategory_text = "üïí –ß–∞—Å—Ç–∫–æ–≤–∞ –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å"
        elif call.data == 'job_accounting':
            subcategory_text = "üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è"
        elif call.data == 'job_hotel_restaurant_business':
            subcategory_text = "üè® –ì–æ—Ç–µ–ª—å–Ω–æ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∏–π –±—ñ–∑–Ω–µ—Å"
        elif call.data == 'job_other_industries':
            subcategory_text = "üåê –Ü–Ω—à—ñ —Å—Ñ–µ—Ä–∏ –∑–∞–Ω—è—Ç—å"
        elif call.data == 'job_auto_service_car_washes':
            subcategory_text = "üîß –°–¢–û / –ê–≤—Ç–æ–º–∏–π–∫–∏"
        elif call.data == 'job_military_service':
            subcategory_text = "üéñÔ∏è –°–ª—É–∂–±–∞ –≤ –°–∏–ª–∞—Ö –æ–±–æ—Ä–æ–Ω–∏"

        ###
        elif call.data == 'animals_dogs':
            subcategory_text = "üê∂ –°–æ–±–∞–∫–∏"
        elif call.data == 'animals_cats':
            subcategory_text = "üê± –ö–æ—Ç–∏"
        elif call.data == 'animals_aquarium':
            subcategory_text = "üê† –ê–∫–≤–∞—Ä—ñ—É–º—ñ—Å—Ç–∏–∫–∞"
        elif call.data == 'animals_birds':
            subcategory_text = "üê¶ –ü—Ç–∞—à–∫–∏"
        elif call.data == 'animals_rodents':
            subcategory_text = "üê≠ –ì—Ä–∏–∑—É–Ω–∏"
        elif call.data == 'animals_reptiles':
            subcategory_text = "ü¶é –†–µ–ø—Ç–∏–ª—ñ—ó"
        elif call.data == 'animals_farm_animals':
            subcategory_text = "üêÑ –°—ñ–ª—å–≥–æ—Å–ø —Ç–≤–∞—Ä–∏–Ω–∏"
        elif call.data == 'animals_other_animals':
            subcategory_text = "üêæ –Ü–Ω—à—ñ —Ç–≤–∞—Ä–∏–Ω–∏"
        elif call.data == 'animals_pet_supplies':
            subcategory_text = "üè¨ –ó–æ–æ—Ç–æ–≤–∞—Ä–∏"
        elif call.data == 'animals_mating':
            subcategory_text = "üíë –í'—è–∑–∫–∞"
        elif call.data == 'animals_found_bureau':
            subcategory_text = "üîç –ë—é—Ä–æ –∑–Ω–∞—Ö—ñ–¥–æ–∫"

        ##
        elif call.data == 'house_garden_stationery_consumables':
            subcategory_text = "üìù –ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏ / –í–∏—Ç—Ä–∞—Ç–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏"
        elif call.data == 'house_garden_furniture':
            subcategory_text = "üõãÔ∏è –ú–µ–±–ª—ñ"
        elif call.data == 'house_garden_food_drinks':
            subcategory_text = "üç≤ –ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è / –ù–∞–ø–æ—ó"
        elif call.data == 'house_garden_garden':
            subcategory_text = "üå≥ –°–∞–¥ / –ì–æ—Ä–æ–¥"
        elif call.data == 'house_garden_interior_items':
            subcategory_text = "üñºÔ∏è –ü—Ä–µ–¥–º–µ—Ç–∏ —ñ–Ω—Ç–µ—Ä'—î—Ä—É"
        elif call.data == 'house_garden_construction_repair':
            subcategory_text = "üõ†Ô∏è –ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ / –†–µ–º–æ–Ω—Ç"
        elif call.data == 'house_garden_tools':
            subcategory_text = "üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"
        elif call.data == 'house_garden_indoor_plants':
            subcategory_text = "ü™¥ –ö—ñ–º–Ω–∞—Ç–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏"
        elif call.data == 'house_garden_tableware_kitchenware':
            subcategory_text = "üçΩÔ∏è –ü–æ—Å—É–¥ / –ö—É—Ö–æ–Ω–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è"
        elif call.data == 'house_garden_garden_inventory':
            subcategory_text = "üöú –°–∞–¥–æ–≤–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"
        elif call.data == 'house_garden_household_inventory_chemicals':
            subcategory_text = "üßΩ –ì–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä / –ü–æ–±—É—Ç–æ–≤–∞ —Ö—ñ–º—ñ—è"
        elif call.data == 'house_garden_other_home_goods':
            subcategory_text = "üè† –Ü–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–º—É"

        ##
        elif call.data == 'electronics_phones_accessories':
            subcategory_text = "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'electronics_computers_components':
            subcategory_text = "üíª –ö–æ–º–ø'—é—Ç–µ—Ä–∏ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ"
        elif call.data == 'electronics_photo_video':
            subcategory_text = "üì∑ –§–æ—Ç–æ / –í—ñ–¥–µ–æ"
        elif call.data == 'electronics_tv_video_equipment':
            subcategory_text = "üì∫ –¢–í / –í—ñ–¥–µ–æ—Ç–µ—Ö–Ω—ñ–∫–∞"
        elif call.data == 'electronics_audio_equipment':
            subcategory_text = "üîä –ê—É–¥—ñ–æ—Ç–µ—Ö–Ω—ñ–∫–∞"
        elif call.data == 'electronics_games_consoles':
            subcategory_text = "üéÆ –Ü–≥—Ä–∏ —Ç–∞ —ñ–≥—Ä–æ–≤—ñ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏"
        elif call.data == 'electronics_tablets_accessories':
            subcategory_text = "üìü –ü–ª–∞–Ω—à–µ—Ç–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'electronics_laptops_accessories':
            subcategory_text = "üíª –ù–æ—É—Ç–±—É–∫–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'electronics_home_appliances':
            subcategory_text = "üè† –¢–µ—Ö–Ω—ñ–∫–∞ –¥–ª—è –¥–æ–º—É"
        elif call.data == 'electronics_kitchen_appliances':
            subcategory_text = "üç≥ –¢–µ—Ö–Ω—ñ–∫–∞ –¥–ª—è –∫—É—Ö–Ω—ñ"
        elif call.data == 'electronics_climate_equipment':
            subcategory_text = "‚ùÑÔ∏è –ö–ª—ñ–º–∞—Ç–∏—á–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        elif call.data == 'electronics_personal_care':
            subcategory_text = "üß¥ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –¥–æ–≥–ª—è–¥"
        elif call.data == 'electronics_accessories_components':
            subcategory_text = "üîå –ê–∫—Å–µ—Å—É–∞—Ä–∏ –π –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ"
        elif call.data == 'electronics_other_electronics':
            subcategory_text = "üîß –Ü–Ω—à–∞ –µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω—ñ–∫–∞"

        ##
        if call.data == 'business_services_auto_moto':
            subcategory_text = "üöó –ê–≤—Ç–æ / –ú–æ—Ç–æ –ø–æ—Å–ª—É–≥–∏"
        elif call.data == 'business_services_beauty_health':
            subcategory_text = "üíá –ö—Ä–∞—Å–∞ / –ó–¥–æ—Ä–æ–≤'—è"
        elif call.data == 'business_services_child_elderly_care':
            subcategory_text = "üë∂ –î–æ–≥–ª—è–¥ –∑–∞ –¥—ñ—Ç—å–º–∏ —Ç–∞ –ª—ñ—Ç–Ω—ñ–º–∏ –ª—é–¥—å–º–∏"
        elif call.data == 'business_services_household':
            subcategory_text = "üè† –ü–æ–±—É—Ç–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏"
        elif call.data == 'business_services_cleaning':
            subcategory_text = "üßπ –ö–ª—ñ–Ω—ñ–Ω–≥"
        elif call.data == 'business_services_education_sports':
            subcategory_text = "üìö –ü–æ—Å–ª—É–≥–∏ –æ—Å–≤—ñ—Ç–∏ —Ç–∞ —Å–ø–æ—Ä—Ç—É"
        elif call.data == 'business_services_transportation':
            subcategory_text = "üöö –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è"
        elif call.data == 'business_services_specialized_services':
            subcategory_text = "üõ†Ô∏è –ü–æ—Å–ª—É–≥–∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∏"
        elif call.data == 'business_services_photo_video':
            subcategory_text = "üì∏ –§–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ–∑–π–æ–º–∫–∞"
        elif call.data == 'business_services_event_organization':
            subcategory_text = "üéâ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Å–≤—è—Ç"
        elif call.data == 'business_services_appliance_repair':
            subcategory_text = "üõ†Ô∏è –†–µ–º–æ–Ω—Ç —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ–∫–∏"
        elif call.data == 'business_services_construction_repair':
            subcategory_text = "üî® –ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ —Ç–∞ —Ä–µ–º–æ–Ω—Ç"
        elif call.data == 'business_services_raw_materials_materials':
            subcategory_text = "üì¶ –°–∏—Ä–æ–≤–∞–Ω–∏–Ω–∞ / –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏"
        elif call.data == 'business_services_secondhand_reception':
            subcategory_text = "üîÑ –ü—Ä–∏–π–æ–º –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏"
        elif call.data == 'business_services_tourism_immigration':
            subcategory_text = "‚úàÔ∏è –¢—É—Ä–∏–∑–º / –Ü–º—ñ–≥—Ä–∞—Ü—ñ—è"
        elif call.data == 'business_services_business':
            subcategory_text = "üëî –î—ñ–ª–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏"
        elif call.data == 'business_services_business_sale':
            subcategory_text = "üíº –ü—Ä–æ–¥–∞–∂ –±—ñ–∑–Ω–µ—Å—É"
        elif call.data == 'business_services_animal_services':
            subcategory_text = "üêæ –ü–æ—Å–ª—É–≥–∏ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω"
        elif call.data == 'business_services_funeral_services':
            subcategory_text = "‚ö∞Ô∏è –†–∏—Ç—É–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏"
        elif call.data == 'business_services_other_services':
            subcategory_text = "üîß –Ü–Ω—à—ñ –ø–æ—Å–ª—É–≥–∏"

        ##
        elif call.data == 'rent_hire_transport_equipment':
            subcategory_text = "üöó –û—Ä–µ–Ω–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É —Ç–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∏"
        elif call.data == 'rent_hire_bike_moto_rental':
            subcategory_text = "üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ–≤ —ñ –º–æ—Ç–æ"
        elif call.data == 'rent_hire_equipment_rental':
            subcategory_text = "üõ†Ô∏è –û—Ä–µ–Ω–¥–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        elif call.data == 'rent_hire_tool_rental':
            subcategory_text = "üîß –ü—Ä–æ–∫–∞—Ç —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"
        elif call.data == 'rent_hire_medical_goods_rental':
            subcategory_text = "üè• –ü—Ä–æ–∫–∞—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –º–µ–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"
        elif call.data == 'rent_hire_tech_electronics_rental':
            subcategory_text = "üîå –ü—Ä–æ–∫–∞—Ç —Ç–µ—Ö–Ω—ñ–∫–∏ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏"
        elif call.data == 'rent_hire_event_goods_rental':
            subcategory_text = "üéâ –ü—Ä–æ–∫–∞—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞—Ö–æ–¥—ñ–≤"
        elif call.data == 'rent_hire_sports_tourism_rental':
            subcategory_text = "‚öΩ –ü—Ä–æ–∫–∞—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö —Ç–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"
        elif call.data == 'rent_hire_clothing_accessories_rental':
            subcategory_text = "üëó –ü—Ä–æ–∫–∞—Ç –æ–¥—è–≥—É —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤"
        elif call.data == 'rent_hire_childrens_clothing_rental':
            subcategory_text = "üë∂ –ü—Ä–æ–∫–∞—Ç –¥–∏—Ç—è—á–æ–≥–æ –æ–¥—è–≥—É —Ç–∞ —Ç–æ–≤–∞—Ä—ñ–≤"
        elif call.data == 'rent_hire_other_goods_rental':
            subcategory_text = "üîÑ –ü—Ä–æ–∫–∞—Ç —ñ–Ω—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"

        ##
        elif call.data == 'fashion_style_womens_clothing':
            subcategory_text = "üëó –ñ—ñ–Ω–æ—á–∏–π –æ–¥—è–≥"
        elif call.data == 'fashion_style_womens_shoes':
            subcategory_text = "ü•ø –ñ—ñ–Ω–æ—á–µ –≤–∑—É—Ç—Ç—è"
        elif call.data == 'fashion_style_mens_clothing':
            subcategory_text = "üëî –ß–æ–ª–æ–≤—ñ—á–∏–π –æ–¥—è–≥"
        elif call.data == 'fashion_style_mens_shoes':
            subcategory_text = "üëû –ß–æ–ª–æ–≤—ñ—á–µ –≤–∑—É—Ç—Ç—è"
        elif call.data == 'fashion_style_womens_underwear_swimwear':
            subcategory_text = "ü©≤ –ñ—ñ–Ω–æ—á–∞ –±—ñ–ª–∏–∑–Ω–∞ —Ç–∞ –∫—É–ø–∞–ª—å–Ω–∏–∫–∏"
        elif call.data == 'fashion_style_mens_underwear_swimwear':
            subcategory_text = "ü©≤ –ß–æ–ª–æ–≤—ñ—á–∞ –±—ñ–ª–∏–∑–Ω–∞ —Ç–∞ –ø–ª–∞–≤–∫–∏"
        elif call.data == 'fashion_style_headwear':
            subcategory_text = "üëí –ì–æ–ª–æ–≤–Ω—ñ —É–±–æ—Ä–∏"
        elif call.data == 'fashion_style_for_wedding':
            subcategory_text = "üë∞ –î–ª—è –≤–µ—Å—ñ–ª–ª—è"
        elif call.data == 'fashion_style_wristwatches':
            subcategory_text = "‚åö –ù–∞—Ä—É—á–Ω—ñ –≥–æ–¥–∏–Ω–Ω–∏–∫–∏"
        elif call.data == 'fashion_style_accessories':
            subcategory_text = "üï∂Ô∏è –ê–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'fashion_style_maternity_clothing':
            subcategory_text = "ü§∞ –û–¥—è–≥ –¥–ª—è –≤–∞–≥—ñ—Ç–Ω–∏—Ö"
        elif call.data == 'fashion_style_beauty_health':
            subcategory_text = "üíÑ –ö—Ä–∞—Å–∞ / –∑–¥–æ—Ä–æ–≤'—è"
        elif call.data == 'fashion_style_gifts':
            subcategory_text = "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏"
        elif call.data == 'fashion_style_workwear_footwear_accessories':
            subcategory_text = "üë∑ –°–ø–µ—Ü–æ–¥—è–≥, —Å–ø–µ—Ü–≤–∑—É—Ç—Ç—è —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'fashion_style_miscellaneous':
            subcategory_text = "üëö –ú–æ–¥–∞ —Ä—ñ–∑–Ω–µ"

        ##
        elif call.data == 'hobbies_antiques_collectibles':
            subcategory_text = "üè∫ –ê–Ω—Ç–∏–∫–≤–∞—Ä—ñ–∞—Ç / –ö–æ–ª–µ–∫—Ü—ñ—ó"
        elif call.data == 'hobbies_musical_instruments':
            subcategory_text = "üé∂ –ú—É–∑–∏—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"
        elif call.data == 'hobbies_sports_recreation':
            subcategory_text = "‚öΩ –°–ø–æ—Ä—Ç / –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫"
        elif call.data == 'hobbies_cycling':
            subcategory_text = "üö¥ –í–µ–ª–æ"
        elif call.data == 'hobbies_militaria':
            subcategory_text = "ü™ñ –ú—ñ–ª—ñ—Ç–∞—Ä—ñ—è"
        elif call.data == 'hobbies_quadcopters_accessories':
            subcategory_text = "üöÅ –ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        elif call.data == 'hobbies_books_magazines':
            subcategory_text = "üìö –ö–Ω–∏–≥–∏ / –ñ—É—Ä–Ω–∞–ª–∏"
        elif call.data == 'hobbies_cd_dvd_vinyl':
            subcategory_text = "üíø CD / DVD / –ü–ª–∞—Ç—ñ–≤–∫–∏"
        elif call.data == 'hobbies_tickets':
            subcategory_text = "üé´ –ö–≤–∏—Ç–∫–∏"
        elif call.data == 'hobbies_travel_companions':
            subcategory_text = "üåç –ü–æ—à—É–∫ –ø–æ–ø—É—Ç–Ω–∏–∫—ñ–≤"
        elif call.data == 'hobbies_bands_musicians':
            subcategory_text = "üé§ –ü–æ—à—É–∫ –≥—É—Ä—Ç—ñ–≤ / –ú—É–∑–∏–∫–∞–Ω—Ç—ñ–≤"
        elif call.data == 'hobbies_miscellaneous':
            subcategory_text = "üõí –Ü–Ω—à–µ"

        elif call.data == 'go_back_btn':
            updated_message_text = "ü§îÔ∏è –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=updated_message_text,
                                  reply_markup=category_markup,
                                  parse_mode="Markdown")

        if subcategory_text:
            pass
            #process_subcategory_callback(bot, call.message.chat.id, subcategory_text)


@bot.callback_query_handler(func=lambda call: call.data == 'go_back_btn')
def go_back(call):
    updated_message_text = "ü§îÔ∏è –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=updated_message_text,
                          reply_markup=category_markup,
                          parse_mode="Markdown")


def user_bd_create():
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute("""CREATE TABLE IF NOT EXISTS users(
        telegram_id INTEGER PRIMARY KEY NOT NULL,
        name VARCHAR(100) NOT NULL,
        mail TEXT NOT NULL,
        phone_number TEXT NOT NULL,
        registration_time TEXT,
        role INTEGER DEFAULT 0
    )""")

    # –¢–∞–±–ª–∏—Ü—è –æ–≥–æ–ª–æ—à–µ–Ω—å
    cursor.execute("""CREATE TABLE IF NOT EXISTS advertisements(
        advertisement_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        advertisement_category TEXT,
        advertisement_subcategory TEXT,
        advertisement_name VARCHAR(50),
        advertisement_description VARCHAR(300) NOT NULL,
        advertisement_photo_folder TEXT,
        advertisement_price INTEGER,
        advertisement_date TEXT,
        advertisement_until TEXT,
        advertisement_country TEXT,
        advertisement_region TEXT,
        advertisement_city TEXT,
        advertisement_status TEXT,
        advertisement_changes TEXT,
        advertisement_condition TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è –≤–∏–±—Ä–∞–Ω–∏—Ö
    cursor.execute("""CREATE TABLE IF NOT EXISTS favorites(
        favorite_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        advertisement_id TEXT,
        favorite_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id)
        FOREIGN KEY (advertisement_id) REFERENCES advertisements(advertisement_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è —Å–∫–∞—Ä–≥
    cursor.execute("""CREATE TABLE IF NOT EXISTS complaints(
        complaint_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        advertisement_id TEXT,
        complaint_text VARCHAR(60),
        complaint_status VARCHAR(60),
        complaint_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id),
        FOREIGN KEY (advertisement_id) REFERENCES advertisements(advertisement_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö —é–∑–µ—Ä—ñ–≤
    cursor.execute("""CREATE TABLE IF NOT EXISTS blocked_users(
        blocked_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        blocked_date TEXT,
        blocked_until TEXT,
        blocked_reason text,
        admin_id,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id),
        FOREIGN KEY (admin_id) REFERENCES users(telegram_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è –¥—ñ–π –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    cursor.execute("""CREATE TABLE IF NOT EXISTS moderation_actions(
        action_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        advertisement_id TEXT,
        advertisement_status TEXT,
        action_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id),
        FOREIGN KEY (advertisement_id) REFERENCES advertisements(advertisement_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è –¥—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    cursor.execute("""CREATE TABLE IF NOT EXISTS answer_actions(
        action_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        question_id TEXT,
        answer_text TEXT,
        action_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id),
        FOREIGN KEY (question_id) REFERENCES questions(question_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    cursor.execute("""CREATE TABLE IF NOT EXISTS notifications(
        notification_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        notification_title TEXT,
        notification_text TEXT,
        notification_status TEXT,
        notification_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id)
    )""")

    # –¢–∞–±–ª–∏—Ü—è –∑–∞–ø–∏—Ç–∞–Ω—å
    cursor.execute("""CREATE TABLE IF NOT EXISTS questions(
        question_id TEXT PRIMARY KEY,
        telegram_id TEXT,
        question_text TEXT,
        question_status TEXT,
        question_date TEXT,
        FOREIGN KEY (telegram_id) REFERENCES users(telegram_id)
    )""")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ —ñ—Å–Ω—É—î
    cursor.execute('''CREATE TABLE IF NOT EXISTS notified_users_ad_deactivation (
                    notified_id TEXT PRIMARY KEY,
                    telegram_id INTEGER,
                    advertisement_id TEXT,
                    notified_date text,
                    FOREIGN KEY (telegram_id) REFERENCES users(telegram_id),
                    FOREIGN KEY (advertisement_id) REFERENCES advertisements(advertisement_id)
    )''')

    connect.commit()
    connect.close()


def make_folder_photo():
    photo_folder = "photos"
    if not os.path.exists(photo_folder):
        os.makedirs(photo_folder)


def notify_user_about_ad():
    ads_to_deactivate = print_ads_for_deactivation()

    for ad in ads_to_deactivate:
        advertisement_id = ad[0]
        telegram_id = ad[1]
        ad_id = ad[0]
        ad_name = ad[4]
        existing_notification = check_notified(telegram_id, ad_id)

        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ –Ω–µ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ
        if not existing_notification:
            bot.send_message(telegram_id,
                             f"<b>‚ùóÔ∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è '{ad_name}' –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–º —â–µ 3 –¥–Ω—ñ</b>\n\n<i><b>üìù –ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ <b>'üìÇ –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'</b> -> <b>'üìå –ê–∫—Ç–∏–≤–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'</b> -> <b>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</b> -> –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>'üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'</b></i>.\n\n –¢–æ–¥—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–¥–µ –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω–∏–º –Ω–∞ 30 –¥–Ω—ñ–≤!", parse_mode='HTML')
            create_new_notified(telegram_id, advertisement_id)


if __name__ == "__main__":
    try:
        user_bd_create()
        make_folder_photo()
        # adv_bd_create()
        print('–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è!')

        # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω—å —é–∑–µ—Ä—ñ–≤
        scheduler = BackgroundScheduler()
        scheduler.add_job(check_and_unblock_users, 'interval', seconds=1)
        scheduler.add_job(check_and_deactivate_ads, 'interval', seconds=1)
        scheduler.add_job(notify_user_about_ad, 'interval', seconds=1)
        scheduler.start()
        # console_menu_for_bot()
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª—É –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞
        bot.polling(none_stop=True)

    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
# bot.polling()
